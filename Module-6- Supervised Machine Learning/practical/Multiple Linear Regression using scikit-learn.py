# -*- coding: utf-8 -*-
"""how to install sklearn in python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JoQKObE9NBHMyCA6NcSmmQSymBZ_5STc

Installing **scikit-learn** ($\text{sklearn}$) in Python is straightforward and typically done using the **`pip`** package installer. Scikit-learn requires that **NumPy** and **SciPy** (for numerical operations) are already installed.

Here are the steps to install it:

### 1\. Prerequisite Check (Recommended)

Ensure you have **Python** installed (version 3.8 or newer is recommended) and the package managers **pip** and **setuptools** are up-to-date.

```bash
# Update pip
python -m pip install --upgrade pip
```

### 2\. Standard Installation using pip

The simplest and most common way to install $\text{sklearn}$ is via $\text{pip}$:

```bash
pip install scikit-learn
```

This command will automatically download and install the latest stable version of scikit-learn along with its dependencies ($\text{NumPy}$ and $\text{SciPy}$) if they are not already present.

-----

### 3\. Installation in a Jupyter/Colab Notebook

If you are working within a **Jupyter Notebook** or **Google Colab**, you should use the exclamation mark (`!`) before the command:
"""

!pip install scikit-learn

!pip install scikit-learn

"""-----

### 4\. Installation using Anaconda/Conda (If you use the Anaconda Distribution)

If you manage your Python environment using **Anaconda** or **Miniconda**, it's best practice to use the `conda` package manager:

```bash
conda install scikit-learn
```

Using `conda` is often recommended as it manages complex dependencies, ensuring you have compatible versions of all required scientific packages.

-----

### 5\. Verification

After the installation is complete, you can verify it by opening a Python interpreter (or a new notebook cell) and trying to import the library:
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# 1. Create a sample dataset (simulating a DataFrame)
data = {
    'SqFt': [1500, 2000, 1200, 2500, 1800],
    'Bedrooms': [3, 4, 2, 4, 3],
    'Age': [10, 5, 20, 2, 15],
    'Price': [300000, 450000, 200000, 550000, 350000] # Target variable
}
df = pd.DataFrame(data)

# Define Features (X) and Target (y)
X = df[['SqFt', 'Bedrooms', 'Age']]
y = df['Price']

# Split data (standard practice, even for small examples)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. Initialize and Train Model
mlr_model = LinearRegression()
mlr_model.fit(X_train, y_train)

# 3. Get the Coefficients and Intercept
print(f"Intercept (β₀): {mlr_model.intercept_:.2f}")
print(f"Coefficients (β₁...βₙ): {mlr_model.coef_}")
print(f"Features: {list(X.columns)}")

# 4. Make Predictions and Evaluate
y_pred = mlr_model.predict(X_test)
# Since the dataset is tiny, interpretation is illustrative:
# Price = β₀ + (β₁ * SqFt) + (β₂ * Bedrooms) + (β₃ * Age)

"""If the installation was successful, this code will execute without an error and display the installed version number."""